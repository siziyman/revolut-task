/*
 * This file is generated by jOOQ.
 */
package revolut.home.task.account.tables.records;


import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import revolut.home.task.account.tables.Currencies;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrenciesRecord extends UpdatableRecordImpl<CurrenciesRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 297177248;

    /**
     * Setter for <code>PUBLIC.CURRENCIES.ID</code>.
     */
    public CurrenciesRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.CURRENCIES.ID</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.CURRENCIES.FULL_NAME</code>.
     */
    public CurrenciesRecord setFullName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.CURRENCIES.FULL_NAME</code>.
     */
    public String getFullName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Currencies.CURRENCIES.ID;
    }

    @Override
    public Field<String> field2() {
        return Currencies.CURRENCIES.FULL_NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFullName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFullName();
    }

    @Override
    public CurrenciesRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public CurrenciesRecord value2(String value) {
        setFullName(value);
        return this;
    }

    @Override
    public CurrenciesRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CurrenciesRecord
     */
    public CurrenciesRecord() {
        super(Currencies.CURRENCIES);
    }

    /**
     * Create a detached, initialised CurrenciesRecord
     */
    public CurrenciesRecord(String id, String fullName) {
        super(Currencies.CURRENCIES);

        set(0, id);
        set(1, fullName);
    }
}
