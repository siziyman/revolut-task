plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "org.jetbrains.kotlin.kapt" version "1.3.61"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.61"
    id "com.github.johnrengelman.shadow" version "5.2.0"
//    id 'nu.studer.jooq' version '4.1'
    id "application"
}


version "0.1"
group "revolut.home.task"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation 'io.micronaut.configuration:micronaut-jasync-sql'
    implementation 'io.micronaut.configuration:micronaut-jooq'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'org.jooq:jooq-meta:3.12.4'
//    jooqRuntime 'com.h2database:h2:1.4.200'
    implementation 'io.micronaut.configuration:micronaut-flyway'
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly 'io.micronaut.configuration:micronaut-jdbc-hikari'
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
}

test.classpath += configurations.developmentOnly

mainClassName = "revolut.home.task.Application"

// This was used to codegen JOOQ schema sources:
//
//jooq {
//    version = '3.12.4'
//    edition = 'OSS'
//    generateSchemaSourceOnCompilation = true
//    task(sourceSets.main) {
//        jdbc {
//            driver = 'org.h2.Driver'
//            url = 'jdbc:h2:~/h2-test'
//            user = 'sa'
//            password = ''
//        }
//        generator {
//            name = 'org.jooq.codegen.DefaultGenerator'
//            strategy {
//                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//                // ...
//            }
//            database {
//                name = 'org.jooq.meta.h2.H2Database'
//                inputSchema = 'PUBLIC'
//                forcedTypes {
//                    forcedType {
//                        name = 'varchar'
//                        expression = '.*'
//                        types = 'JSONB?'
//                    }
//                    forcedType {
//                        name = 'varchar'
//                        expression = '.*'
//                        types = 'INET'
//                    }
//                }
//                excludes = "flyway_schema_history"
//
//            }
//            generate {
//                relations = true
//                deprecated = false
//                records = true
//                immutablePojos = true
//                fluentSetters = true
//                // ...
//            }
//            target {
//                packageName = 'revolut.home.task.account'
//                directory = 'src/generated/jooq'
//            }
//        }
//    }
//}
//
//generateTaskJooqSchemaSource {
//    outputs.upToDateWhen {false}
//}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java.srcDirs+='src/generated/jooq'
    }
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
