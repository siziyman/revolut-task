/*
 * This file is generated by jOOQ.
 */
package revolut.home.task.account.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import revolut.home.task.account.Indexes;
import revolut.home.task.account.Keys;
import revolut.home.task.account.Public;
import revolut.home.task.account.tables.records.CurrenciesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currencies extends TableImpl<CurrenciesRecord> {

    private static final long serialVersionUID = -1975434036;

    /**
     * The reference instance of <code>PUBLIC.CURRENCIES</code>
     */
    public static final Currencies CURRENCIES = new Currencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrenciesRecord> getRecordType() {
        return CurrenciesRecord.class;
    }

    /**
     * The column <code>PUBLIC.CURRENCIES.ID</code>.
     */
    public final TableField<CurrenciesRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CURRENCIES.FULL_NAME</code>.
     */
    public final TableField<CurrenciesRecord, String> FULL_NAME = createField(DSL.name("FULL_NAME"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * Create a <code>PUBLIC.CURRENCIES</code> table reference
     */
    public Currencies() {
        this(DSL.name("CURRENCIES"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CURRENCIES</code> table reference
     */
    public Currencies(String alias) {
        this(DSL.name(alias), CURRENCIES);
    }

    /**
     * Create an aliased <code>PUBLIC.CURRENCIES</code> table reference
     */
    public Currencies(Name alias) {
        this(alias, CURRENCIES);
    }

    private Currencies(Name alias, Table<CurrenciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currencies(Name alias, Table<CurrenciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Currencies(Table<O> child, ForeignKey<O, CurrenciesRecord> key) {
        super(child, key, CURRENCIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_D);
    }

    @Override
    public UniqueKey<CurrenciesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<CurrenciesRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrenciesRecord>>asList(Keys.CONSTRAINT_D);
    }

    @Override
    public Currencies as(String alias) {
        return new Currencies(DSL.name(alias), this);
    }

    @Override
    public Currencies as(Name alias) {
        return new Currencies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(String name) {
        return new Currencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(Name name) {
        return new Currencies(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
